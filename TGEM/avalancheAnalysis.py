import numpy as np 
import matplotlib.pyplot as plt
import pandas as pd 
from scipy.optimize import curve_fit

plt.rcParams.update({
  "text.usetex": True,
  "font.family": "sans-serif"
})

def readAvalancheData(ar, energy, V, showHists = False, showDistribution = False):
	filePath = 'dataAvalanchesAr{}E{}V{}.csv'.format(ar, energy, V)
	
	dataFrame = pd.read_csv(filePath)

	filTot	 = dataFrame['filTot']
	ne 		 = dataFrame['ne']
	nIons 	 = dataFrame['nIons']

	tot = dataFrame.groupby('step')['filTot'].sum()

	gainAllMean = tot.mean()
	gainAllStd  = tot.std()

	totMean = dataFrame.groupby('step')['filTot'].mean()
	totStd = dataFrame.groupby('step')['filTot'].std()

	gainAvgMean = totMean.mean()
	gainAvgStd  = totMean.std()

	electronsAllMean = ne.mean()
	electronsAllStd = ne.std()

	ionsAllMean = nIons.mean()
	ionsAllStd = nIons.std()

	ne = dataFrame.groupby('step')['ne'].sum()
	nIons = dataFrame.groupby('step')['nIons'].sum()

	electronsEventMean = ne.mean()
	electronsEventStd = ne.std()

	ionsEventMean = nIons.mean()
	ionsEventStd = ne.std()

	if(showHists):
		
		plt.title(r'Distribución de la ganancia total')
		plt.hist(filTot, bins = 40, color = 'blue', label = r'$\mu = $' + '{:.4f}'.format(filTot.mean()) + r', $\sigma = $' + '{:.4f}'.format(filTot.std()))
		plt.xlabel('Ganancia por avalancha')
		plt.ylabel('Conteos')
		plt.legend()
		plt.savefig('avalancheGraphs/HistGananciaTot.eps', format = 'eps')
		plt.show()

		plt.title(r'Distribución de la ganancia por muón')
		plt.hist(tot, bins = 40, color = 'black', label = r'$\mu = $' + '{:.4f}'.format(tot.mean()) + r', $\sigma = $' + '{:.4f}'.format(tot.std()))
		plt.xlabel('Ganancia total')
		plt.ylabel('Conteos')
		plt.legend()
		plt.savefig('avalancheGraphs/HistGananciaMuon.eps', format = 'eps')
		plt.show()

		plt.title(r'Distribución del número de electrones por muón')
		plt.hist(ne, bins = 40, color = 'red', label = r'$\mu = $' + '{:.4f}'.format(ne.mean()) + r', $\sigma = $' + '{:.4f}'.format(ne.std()))
		plt.xlabel('Número de electrones')
		plt.ylabel('Conteos')
		plt.legend()
		plt.savefig('avalancheGraphs/HistElectrones.eps', format = 'eps')
		plt.show()

		plt.title(r'Distribución del número de iones por muón')
		plt.hist(nIons, bins = 40, color = 'magenta', label = r'$\mu = $' + '{:.4f}'.format(nIons.mean()) + r', $\sigma = $' + '{:.4f}'.format(nIons.std()))
		plt.xlabel('Número de iones')
		plt.ylabel('Conteos')
		plt.legend()
		plt.savefig('avalancheGraphs/HistIones.eps', format = 'eps')
		plt.show()
		

	if(showDistribution):

		plt.title(r'Distribución de la ganancia promediada por avalancha')
		plt.hist(totMean, bins = 40, color = 'blue', label = r'$\mu = $' + '{:.4f}'.format(totMean.mean()) + r', $\sigma = $' + '{:.4f}'.format(totMean.std()))
		plt.xlabel('Ganancia promedio')
		plt.ylabel('Conteos')
		plt.legend()
		plt.savefig('avalancheGraphs/HistGananciaProm.eps', format = 'eps')
		plt.show()
		
		plt.title(r'Distribución de la desviación de la ganancia promediada por avalancha')
		plt.hist(totStd, bins = 40, color = 'brown', label = r'$\mu = $' + '{:.4f}'.format(totStd.mean()) + r', $\sigma = $' + '{:.4f}'.format(totStd.std()))
		plt.ylabel('Conteos')
		plt.xlabel('Desviación ganancia promedio')
		plt.legend()
		plt.savefig('avalancheGraphs/HistDesGananciaProm.eps', format = 'eps')
		plt.show()

	return np.array([gainAllMean, gainAllStd, gainAvgMean, gainAvgStd, ne, nIons, electronsAllMean, electronsAllStd, electronsEventMean, electronsEventStd], dtype  = np.dtype('O'))

readAvalancheData(70, 9, 400, showHists = True, showDistribution = True)


"""
def curveFit(x, y, mod = 'linear', guess = None):
	if(mod == 'linear'):
		coef, cov = curve_fit(lambda x, m, b: m*x + b, x, y, p0 = guess)

		def f(x):
			return x*coef[0] + coef[1]

		return np.vectorize(f)

	elif(mod == 'exp'):
		coef, cov = curve_fit(lambda x, a, b, c: a*np.exp(b*x) + c, x, y, p0 = guess)

		def f(x):
			return coef[0]*np.exp(coef[1]*x) + coef[2]

		return np.vectorize(f)

def fixedEfixedV(V, energy):
	argons = np.array([60, 65, 70, 75, 80])
	return np.vectorize(readAvalancheData, excluded=['energy', 'V'], signature = '()->(n)')(energy = energy, V = V, ar = argons)

def fixedEfixedAr(ar, energy):
	voltages = np.array([400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500])
	return np.vectorize(readAvalancheData, excluded=['energy', 'ar'], signature = '()->(n)')(ar = ar, V = voltages, energy = energy)
	
def fixedE(energy = 9):
	voltages = np.array([400, 410, 420, 430, 440, 450, 460, 470, 480, 490, 500])
	argons = np.array([60, 65, 70, 75, 80])

	fixedAr = np.vectorize(fixedEfixedAr, excluded = ['energy'], signature = '()->(n,m)')(ar = argons, energy = energy)
	
	gainAllMean, gainAllStd, gainAvgMean, gainAvgStd, ne, nIons, electronsAllMean, electronsAllStd, electronsEventMean, electronsEventStd = fixedAr[:,:,0 ], fixedAr[:,:,1], fixedAr[:,:,2], fixedAr[:,:,3], fixedAr[:,:,4], fixedAr[:,:,5], fixedAr[:,:,6], fixedAr[:,:,7], fixedAr[:,:,8], fixedAr[:,:,9]          
	

	plt.title(r'Ganancia total contra voltaje para $\%$ Ar/CO2 fijos')
	plt.scatter(voltages, gainAllMean[0, :], color = 'purple')
	plt.plot(voltages, gainAllMean[0, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.plot(voltages, gainAllMean[1, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(voltages, gainAllMean[1, :], color = 'red')
	plt.plot(voltages, gainAllMean[2, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(voltages, gainAllMean[2, :], color = 'green')
	plt.plot(voltages, gainAllMean[3, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(voltages, gainAllMean[3, :], color = 'magenta')
	plt.plot(voltages, gainAllMean[4, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(voltages, gainAllMean[4, :], color = 'blue')
	plt.ylabel('Ganancia total')
	plt.xlabel(r'$V_{\mathrm{GEM}}$(V)')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/GananciaTot-V-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación estándar para ganancia total contra voltaje para $\%$ Ar/CO2 fijos')
	plt.plot(voltages, gainAllStd[0, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(voltages, gainAllStd[0, :], color = 'purple')
	plt.plot(voltages, gainAllStd[1, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(voltages, gainAllStd[1, :], color = 'red')
	plt.plot(voltages, gainAllStd[2, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(voltages, gainAllStd[2, :], color = 'green')
	plt.plot(voltages, gainAllStd[3, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(voltages, gainAllStd[3, :], color = 'magenta')
	plt.plot(voltages, gainAllStd[4, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(voltages, gainAllStd[4, :], color = 'blue')
	plt.ylabel('Desviación ganancia total')
	plt.xlabel(r'$V_{\mathrm{GEM}}$(V)')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesGananciaTot-V-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Ganancia promedio contra voltaje para $\%$ Ar/CO2 fijos')
	plt.plot(voltages, gainAvgMean[0, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(voltages, gainAvgMean[0, :], color = 'purple')
	plt.plot(voltages, gainAvgMean[1, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(voltages, gainAvgMean[1, :], color = 'red')
	plt.plot(voltages, gainAvgMean[2, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(voltages, gainAvgMean[2, :], color = 'green')
	plt.plot(voltages, gainAvgMean[3, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(voltages, gainAvgMean[3, :], color = 'magenta')
	plt.plot(voltages, gainAvgMean[4, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(voltages, gainAvgMean[4, :], color = 'blue')
	plt.ylabel('Ganancia promedio')
	plt.xlabel(r'$V_{\mathrm{GEM}}$(V)')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/GananciaProm-V-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación estándar para ganancia promedio contra voltaje para $\%$ Ar/CO2 fijos')
	plt.plot(voltages, gainAvgStd[0, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(voltages, gainAvgStd[0, :], color = 'purple')
	plt.plot(voltages, gainAvgStd[1, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(voltages, gainAvgStd[1, :], color = 'red')
	plt.plot(voltages, gainAvgStd[2, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(voltages, gainAvgStd[2, :], color = 'green')
	plt.plot(voltages, gainAvgStd[3, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(voltages, gainAvgStd[3, :], color = 'magenta')
	plt.plot(voltages, gainAvgStd[4, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(voltages, gainAvgStd[4, :], color = 'blue')
	plt.ylabel('Desviación ganancia promedio')
	plt.xlabel(r'$V_{\mathrm{GEM}}$(V)')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesGananciaProm-V-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Número de electrones promedio contra voltaje para $\%$ Ar/CO2 fijos')
	plt.plot(voltages, electronsAllMean[0, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(voltages, electronsAllMean[0, :], color = 'purple')
	plt.plot(voltages, electronsAllMean[1, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(voltages, electronsAllMean[1, :], color = 'red')
	plt.plot(voltages, electronsAllMean[2, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(voltages, electronsAllMean[2, :], color = 'green')
	plt.plot(voltages, electronsAllMean[3, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(voltages, electronsAllMean[3, :], color = 'magenta')
	plt.plot(voltages, electronsAllMean[4, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(voltages, electronsAllMean[4, :], color = 'blue')
	plt.ylabel('Número de electrones promedio')
	plt.xlabel(r'$V_{\mathrm{GEM}}$(V)')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/EleNumProm-V-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación del número de promedio totales contra voltaje para $\%$ Ar/CO2 fijos')
	plt.plot(voltages, electronsAllStd[0, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(voltages, electronsAllStd[0, :], color = 'purple')
	plt.plot(voltages, electronsAllStd[1, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(voltages, electronsAllStd[1, :], color = 'red')
	plt.plot(voltages, electronsAllStd[2, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(voltages, electronsAllStd[2, :], color = 'green')
	plt.plot(voltages, electronsAllStd[3, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(voltages, electronsAllStd[3, :], color = 'magenta')
	plt.plot(voltages, electronsAllStd[4, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(voltages, electronsAllStd[4, :], color = 'blue')
	plt.ylabel('Desviación número de electrones promedio')
	plt.xlabel(r'$V_{\mathrm{GEM}}$(V)')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesEleNumProm-V-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Número de electrones totales contra voltaje para $\%$ Ar/CO2 fijos')
	plt.plot(voltages, electronsEventMean[0, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(voltages, electronsEventMean[0, :], color = 'purple')
	plt.plot(voltages, electronsEventMean[1, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(voltages, electronsEventMean[1, :], color = 'red')
	plt.plot(voltages, electronsEventMean[2, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(voltages, electronsEventMean[2, :], color = 'green')
	plt.plot(voltages, electronsEventMean[3, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(voltages, electronsEventMean[3, :], color = 'magenta')
	plt.plot(voltages, electronsEventMean[4, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(voltages, electronsEventMean[4, :], color = 'blue')
	plt.ylabel('Número de electrones totales')
	plt.xlabel(r'$V_{\mathrm{GEM}}$(V)')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/EleNumTot-V-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación del número de electrones totales contra voltaje para $\%$ Ar/CO2 fijos')
	plt.plot(voltages, electronsEventStd[0, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(voltages, electronsEventStd[0, :], color = 'purple')
	plt.plot(voltages, electronsEventStd[1, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(voltages, electronsEventStd[1, :], color = 'red')
	plt.plot(voltages, electronsEventStd[2, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(voltages, electronsEventStd[2, :], color = 'green')
	plt.plot(voltages, electronsEventStd[3, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(voltages, electronsEventStd[3, :], color = 'magenta')
	plt.plot(voltages, electronsEventStd[4, :], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(voltages, electronsEventStd[4, :], color = 'blue')
	plt.ylabel('Desviación número de electrones totales')
	plt.xlabel(r'$V_{\mathrm{GEM}}$(V)')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesEleNumTot-V-Ar.eps', format = 'eps')
	plt.show()











	plt.title(r'Ganancia total contra $\%$ Ar para voltajes fijos')
	plt.plot(argons, gainAllMean[:, 0], label = 'V = 400V', color = 'purple')
	plt.scatter(argons, gainAllMean[:, 0], color = 'purple')
	plt.plot(argons, gainAllMean[:, 2], label = 'V = 420V', color = 'red')
	plt.scatter(argons, gainAllMean[:, 2], color = 'red')
	plt.plot(argons, gainAllMean[:, 4], label = 'V = 440V', color = 'green')
	plt.scatter(argons, gainAllMean[:, 4], color = 'green')
	plt.plot(argons, gainAllMean[:, 6], label = 'V = 460V', color = 'magenta')
	plt.scatter(argons, gainAllMean[:, 6], color = 'magenta')
	plt.plot(argons, gainAllMean[:, 8], label = 'V = 480V', color = 'blue')
	plt.scatter(argons, gainAllMean[:, 8], color = 'blue')
	plt.ylabel('Ganancia total')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/GananciaTot-Ar-V.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación estándar para ganancia total contra $\%$ Ar para voltajes fijos')
	plt.plot(argons, gainAllStd[:, 0], label = 'V = 400V', color = 'purple')
	plt.scatter(argons, gainAllStd[:, 0], color = 'purple')
	plt.plot(argons, gainAllStd[:, 2], label = 'V = 420V', color = 'red')
	plt.scatter(argons, gainAllStd[:, 2], color = 'red')
	plt.plot(argons, gainAllStd[:, 4], label = 'V = 440V', color = 'green')
	plt.scatter(argons, gainAllStd[:, 4], color = 'green')
	plt.plot(argons, gainAllStd[:, 6], label = 'V = 460V', color = 'magenta')
	plt.scatter(argons, gainAllStd[:, 6], color = 'magenta')
	plt.plot(argons, gainAllStd[:, 8], label = 'V = 480V', color = 'blue')
	plt.scatter(argons, gainAllStd[:, 8], color = 'blue')
	plt.ylabel('Desviación ganancia total')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesGananciaTot-Ar-V.eps', format = 'eps')
	plt.show()

	plt.title(r'Ganancia promedio contra $\%$ Ar para voltajes fijos')
	plt.plot(argons, gainAvgMean[:, 0], label = 'V = 400V', color = 'purple')
	plt.scatter(argons, gainAvgMean[:, 0], color = 'purple')
	plt.plot(argons, gainAvgMean[:, 2], label = 'V = 420V', color = 'red')
	plt.scatter(argons, gainAvgMean[:, 2], color = 'red')
	plt.plot(argons, gainAvgMean[:, 4], label = 'V = 440V', color = 'green')
	plt.scatter(argons, gainAvgMean[:, 4], color = 'green')
	plt.plot(argons, gainAvgMean[:, 6], label = 'V = 460V', color = 'magenta')
	plt.scatter(argons, gainAvgMean[:, 6], color = 'magenta')
	plt.plot(argons, gainAvgMean[:, 8], label = 'V = 480V', color = 'blue')
	plt.scatter(argons, gainAvgMean[:, 8], color = 'blue')
	plt.ylabel('Ganancia promedio')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/GananciaProm-Ar-V.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación estándar para ganancia promedio contra $\%$ Ar para voltajes fijos')
	plt.plot(argons, gainAvgStd[:, 0], label = 'V = 400V', color = 'purple')
	plt.scatter(argons, gainAvgStd[:, 0], color = 'purple')
	plt.plot(argons, gainAvgStd[:, 2], label = 'V = 420V', color = 'red')
	plt.scatter(argons, gainAvgStd[:, 2], color = 'red')
	plt.plot(argons, gainAvgStd[:, 4], label = 'V = 440V', color = 'green')
	plt.scatter(argons, gainAvgStd[:, 4], color = 'green')
	plt.plot(argons, gainAvgStd[:, 6], label = 'V = 460V', color = 'magenta')
	plt.scatter(argons, gainAvgStd[:, 6], color = 'magenta')
	plt.plot(argons, gainAvgStd[:, 8], label = 'V = 480V', color = 'blue')
	plt.scatter(argons, gainAvgStd[:, 8], color = 'blue')
	plt.ylabel('Desviación ganancia promedio')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesGananciaProm-Ar-V.eps', format = 'eps')
	plt.show()

	plt.title(r'Número de electrones promedio contra $\%$ Ar para voltajes fijos')
	plt.plot(argons, electronsAllMean[:, 0], label = 'V = 400V', color = 'purple')
	plt.scatter(argons, electronsAllMean[:, 0], color = 'purple')
	plt.plot(argons, electronsAllMean[:, 2], label = 'V = 420V', color = 'red')
	plt.scatter(argons, electronsAllMean[:, 2], color = 'red')
	plt.plot(argons, electronsAllMean[:, 4], label = 'V = 440V', color = 'green')
	plt.scatter(argons, electronsAllMean[:, 4], color = 'green')
	plt.plot(argons, electronsAllMean[:, 6], label = 'V = 460V', color = 'magenta')
	plt.scatter(argons, electronsAllMean[:, 6], color = 'magenta')
	plt.plot(argons, electronsAllMean[:, 8], label = 'V = 480V', color = 'blue')
	plt.scatter(argons, electronsAllMean[:, 8], color = 'blue')
	plt.ylabel('Número de electrones promedio')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/EleNumProm-Ar-V.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación del número de electrones promedio contra $\%$ Ar para voltajes fijos')
	plt.plot(argons, electronsAllStd[:, 0], label = 'V = 400V', color = 'purple')
	plt.scatter(argons, electronsAllStd[:, 0], color = 'purple')
	plt.plot(argons, electronsAllStd[:, 2], label = 'V = 420V', color = 'red')
	plt.scatter(argons, electronsAllStd[:, 2], color = 'red')
	plt.plot(argons, electronsAllStd[:, 4], label = 'V = 440V', color = 'green')
	plt.scatter(argons, electronsAllStd[:, 4], color = 'green')
	plt.plot(argons, electronsAllStd[:, 6], label = 'V = 460V', color = 'magenta')
	plt.scatter(argons, electronsAllStd[:, 6], color = 'magenta')
	plt.plot(argons, electronsAllStd[:, 8], label = 'V = 480V', color = 'blue')
	plt.scatter(argons, electronsAllStd[:, 8], color = 'blue')
	plt.ylabel('Desviación número de electrones promedio')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesEleNumProm-Ar-V.eps', format = 'eps')
	plt.show()

	plt.title(r'Número de electrones totales contra $\%$ Ar para voltajes fijos')
	plt.plot(argons, electronsEventMean[:, 0], label = 'V = 400V', color = 'purple')
	plt.scatter(argons, electronsEventMean[:, 0], color = 'purple')
	plt.plot(argons, electronsEventMean[:, 2], label = 'V = 420V', color = 'red')
	plt.scatter(argons, electronsEventMean[:, 2], color = 'red')
	plt.plot(argons, electronsEventMean[:, 4], label = 'V = 440V', color = 'green')
	plt.scatter(argons, electronsEventMean[:, 4], color = 'green')
	plt.plot(argons, electronsEventMean[:, 6], label = 'V = 460V', color = 'magenta')
	plt.scatter(argons, electronsEventMean[:, 6], color = 'magenta')
	plt.plot(argons, electronsEventMean[:, 8], label = 'V = 480V', color = 'blue')
	plt.scatter(argons, electronsEventMean[:, 8], color = 'blue')
	plt.ylabel('Número de electrones totales')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/EleNumTot-Ar-V.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación del número de electrones totales contra $\%$ Ar para voltajes fijos')
	plt.plot(argons, electronsEventStd[:, 0], label = 'V = 400V', color = 'purple')
	plt.scatter(argons, electronsEventStd[:, 0], color = 'purple')
	plt.plot(argons, electronsEventStd[:, 2], label = 'V = 420V', color = 'red')
	plt.scatter(argons, electronsEventStd[:, 2], color = 'red')
	plt.plot(argons, electronsEventStd[:, 4], label = 'V = 440V', color = 'green')
	plt.scatter(argons, electronsEventStd[:, 2], color = 'green')
	plt.plot(argons, electronsEventStd[:, 6], label = 'V = 460V', color = 'magenta')
	plt.scatter(argons, electronsEventStd[:, 6], color = 'magenta')
	plt.plot(argons, electronsEventStd[:, 8], label = 'V = 480V', color = 'blue')
	plt.scatter(argons, electronsEventStd[:, 8], color = 'blue')
	plt.ylabel('Desviación número de electrones totales')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesEleNumTot-Ar-V.eps', format = 'eps')
	plt.show()


fixedE()


"""


"""



def fixedVfixedE(energy, V):
	argons = np.array([60, 65, 70, 75, 80])
	return np.vectorize(readAvalancheData, excluded=['energy', 'V'], signature = '()->(n)')(energy = energy, V = V, ar = argons)

def fixedVfixedAr(ar, V):
	energies= np.array([7, 8, 9, 10, 11])
	return np.vectorize(readAvalancheData, excluded=['ar', 'V'], signature = '()->(n)')(ar = ar, V = V, energy = energies)
	
def fixedV(V = 400):
	energies= np.array([7, 8, 9, 10, 11])
	argons = np.array([60, 65, 70, 75, 80])

	fixedE = np.vectorize(fixedVfixedE, excluded = ['V'], signature = '()->(n,m)')(V = V, energy = energies)
	
	#gainAllMean, gainAllStd, gainAvgMean, gainAvgStd, electronsAllMean, electronsAllStd, electronsEventMean, electronsEventStd, yAvgMean, yAvgStd = fixedE[:, :, 0], fixedE[:, :, 1], fixedE[:, :, 2], fixedE[:, :, 3], fixedE[:, :, 4], fixedE[:, :, 5], fixedE[:, :, 6], fixedE[:, :, 7], fixedE[:, :, 8], fixedE[:, :, 9]
	gainAllMean, gainAllStd, gainAvgMean, gainAvgStd, ne, nIons, electronsAllMean, electronsAllStd, electronsEventMean, electronsEventStd = fixedE[:, :, 0], fixedE[:, :, 1], fixedE[:, :, 2], fixedE[:, :, 3], fixedE[:, :, 4], fixedE[:, :, 5], fixedE[:, :, 6], fixedE[:, :, 7], fixedE[:, :, 8], fixedE[:, :, 9]


	# Intentar gráfica de fluctuaciones
	plt.title(r'Ganancia total contra $\%$Ar para $E_{\mu^{-}}$ fijas')
	plt.plot(argons, gainAllMean[0, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[0]) + r'}$ eV', color = 'purple')
	plt.scatter(argons, gainAllMean[0, :], color = 'purple')
	plt.plot(argons, gainAllMean[1, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[1]) + r'}$ eV', color = 'red')
	plt.scatter(argons, gainAllMean[1, :], color = 'red')
	plt.plot(argons, gainAllMean[2, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[2]) + r'}$ eV', color = 'green')
	plt.scatter(argons, gainAllMean[2, :], color = 'green')
	plt.plot(argons, gainAllMean[3, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[3]) + r'}$ eV', color = 'magenta')
	plt.scatter(argons, gainAllMean[3, :], color = 'magenta')
	plt.plot(argons, gainAllMean[4, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[4]) + r'}$ eV', color = 'blue')
	plt.scatter(argons, gainAllMean[4, :], color = 'blue')
	plt.ylabel('Ganancia total')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/GananciaTot-Ar-E.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación ganancia total contra $\%$Ar para $E_{\mu^{-}}$ fijas')
	plt.plot(argons, gainAllStd[0, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[0]) + r'}$ eV', color = 'purple')
	plt.scatter(argons, gainAllStd[0, :], color = 'purple')
	plt.plot(argons, gainAllStd[1, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[1]) + r'}$ eV', color = 'red')
	plt.scatter(argons, gainAllStd[1, :], color = 'red')
	plt.plot(argons, gainAllStd[2, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[2]) + r'}$ eV', color = 'green')
	plt.scatter(argons, gainAllStd[2, :], color = 'green')
	plt.plot(argons, gainAllStd[3, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[3]) + r'}$ eV', color = 'magenta')
	plt.scatter(argons, gainAllStd[3, :], color = 'magenta')
	plt.plot(argons, gainAllStd[4, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[4]) + r'}$ eV', color = 'blue')
	plt.scatter(argons, gainAllStd[4, :], color = 'blue')
	plt.ylabel('Desviación ganancia total')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesGananciaTot-Ar-E.eps', format = 'eps')
	plt.show()

	plt.title(r'Ganancia promedio contra $\%$Ar para $E_{\mu^{-}}$ fijas')
	plt.plot(argons, gainAvgMean[0, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[0]) + r'}$ eV', color = 'purple')
	plt.scatter(argons, gainAvgMean[0, :], color = 'purple')
	plt.plot(argons, gainAvgMean[1, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[1]) + r'}$ eV', color = 'red')
	plt.scatter(argons, gainAvgMean[1, :], color = 'red')
	plt.plot(argons, gainAvgMean[2, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[2]) + r'}$ eV', color = 'green')
	plt.scatter(argons, gainAvgMean[2, :], color = 'green')
	plt.plot(argons, gainAvgMean[3, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[3]) + r'}$ eV', color = 'magenta')
	plt.scatter(argons, gainAvgMean[3, :], color = 'magenta')
	plt.plot(argons, gainAvgMean[4, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[4]) + r'}$ eV', color = 'blue')
	plt.scatter(argons, gainAvgMean[4, :], color = 'blue')
	plt.ylabel('Ganancia promedio')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/GananciaProm-Ar-E.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación ganancia promedio contra $\%$Ar para $E_{\mu^{-}}$ fijas')
	plt.plot(argons, gainAvgStd[0, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[0]) + r'}$ eV', color = 'purple')
	plt.scatter(argons, gainAvgStd[0, :], color = 'purple')
	plt.plot(argons, gainAvgStd[1, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[1]) + r'}$ eV', color = 'red')
	plt.scatter(argons, gainAvgStd[1, :], color = 'red')
	plt.plot(argons, gainAvgStd[2, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[2]) + r'}$ eV', color = 'green')
	plt.scatter(argons, gainAvgStd[2, :], color = 'green')
	plt.plot(argons, gainAvgStd[3, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[3]) + r'}$ eV', color = 'magenta')
	plt.scatter(argons, gainAvgStd[3, :], color = 'magenta')
	plt.plot(argons, gainAvgStd[4, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[4]) + r'}$ eV', color = 'blue')
	plt.scatter(argons, gainAvgStd[4, :], color = 'blue')
	plt.ylabel('Desviación ganancia promedio')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesGananciaProm-Ar-E.eps', format = 'eps')
	plt.show()


	argonsCont = np.linspace(np.min(argons), np.max(argons), 1000)
	fitArgonsCont = curveFit(argons, electronsAllMean[0, :])(argonsCont)

	plt.title(r'Número de electrones promedio contra $\%$Ar para $E_{\mu^{-}}$ fijas')
	plt.scatter(argons, electronsAllMean[0, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[0]) + r'}$ eV', color = 'purple')
	plt.scatter(argons, electronsAllMean[1, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[1]) + r'}$ eV', color = 'red')
	plt.scatter(argons, electronsAllMean[2, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[2]) + r'}$ eV', color = 'green')
	plt.scatter(argons, electronsAllMean[3, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[3]) + r'}$ eV', color = 'magenta')
	plt.scatter(argons, electronsAllMean[4, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[4]) + r'}$ eV', color = 'blue')
	plt.plot(argonsCont, fitArgonsCont, color = 'black')
	plt.ylabel('Número de electrones promedio')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/EleNumProm-Ar-E.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación del número de electrones promedio contra $\%$Ar para $E_{\mu^{-}}$ fijas')
	plt.plot(argons, electronsAllStd[0, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[0]) + r'}$ eV', color = 'purple')
	plt.scatter(argons, electronsAllStd[0, :], color = 'purple')
	plt.plot(argons, electronsAllStd[1, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[1]) + r'}$ eV', color = 'red')
	plt.scatter(argons, electronsAllStd[1, :], color = 'red')
	plt.plot(argons, electronsAllStd[2, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[2]) + r'}$ eV', color = 'green')
	plt.scatter(argons, electronsAllStd[2, :], color = 'green')
	plt.plot(argons, electronsAllStd[3, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[3]) + r'}$ eV', color = 'magenta')
	plt.scatter(argons, electronsAllStd[3, :], color = 'magenta')
	plt.plot(argons, electronsAllStd[4, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[4]) + r'}$ eV', color = 'blue')
	plt.scatter(argons, electronsAllStd[4, :], color = 'blue')
	plt.ylabel('Desviación número de electrones promedio')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesEleNumProm-Ar-E.eps', format = 'eps')
	plt.show()

	plt.title(r'Número de electrones totales contra $\%$Ar para $E_{\mu^{-}}$ fijas')
	plt.plot(argons, electronsEventMean[0, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[0]) + r'}$ eV', color = 'purple')
	plt.scatter(argons, electronsEventMean[0, :], color = 'purple')
	plt.plot(argons, electronsEventMean[1, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[1]) + r'}$ eV', color = 'red')
	plt.scatter(argons, electronsEventMean[1, :], color = 'red')
	plt.plot(argons, electronsEventMean[2, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[2]) + r'}$ eV', color = 'green')
	plt.scatter(argons, electronsEventMean[2, :], color = 'green')
	plt.plot(argons, electronsEventMean[3, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[3]) + r'}$ eV', color = 'magenta')
	plt.scatter(argons, electronsEventMean[3, :], color = 'magenta')
	plt.plot(argons, electronsEventMean[4, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[4]) + r'}$ eV', color = 'blue')
	plt.scatter(argons, electronsEventMean[4, :], color = 'blue')
	plt.ylabel('Número de electrones totales')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/EleNumTot-Ar-E.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación del número de electrones totales contra $\%$Ar para $E_{\mu^{-}}$ fijas')
	plt.plot(argons, electronsEventStd[0, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[0]) + r'}$ eV', color = 'purple')
	plt.scatter(argons, electronsEventStd[0, :], color = 'purple')
	plt.plot(argons, electronsEventStd[1, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[1]) + r'}$ eV', color = 'red')
	plt.scatter(argons, electronsEventStd[1, :], color = 'red')
	plt.plot(argons, electronsEventStd[2, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[2]) + r'}$ eV', color = 'green')
	plt.scatter(argons, electronsEventStd[2, :], color = 'green')
	plt.plot(argons, electronsEventStd[3, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[3]) + r'}$ eV', color = 'magenta')
	plt.scatter(argons, electronsEventStd[3, :], color = 'magenta')
	plt.plot(argons, electronsEventStd[4, :], label = r'$E_{\mu^{-}}$ = 1 $\times 10 ^{' + str(energies[4]) + r'}$ eV', color = 'blue')
	plt.scatter(argons, electronsEventStd[4, :], color = 'blue')
	plt.ylabel('Desviación número de electrones totales')
	plt.xlabel(r'$\%$ Ar')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesEleNumTot-Ar-E.eps', format = 'eps')
	plt.show()

	

	# Dependencia con la energía
	
	# Intentar la gráfica de las fluctuaciones 

	plt.title(r'Ganancia total contra energía del muón para $\%$Ar/CO2 fijos')
	plt.plot(10**energies, gainAllMean[:, 0], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(10**energies, gainAllMean[:, 0], color = 'purple')
	plt.plot(10**energies, gainAllMean[:, 1], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(10**energies, gainAllMean[:, 1], color = 'red')
	plt.plot(10**energies, gainAllMean[:, 2], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(10**energies, gainAllMean[:, 2], color = 'green')
	plt.plot(10**energies, gainAllMean[:, 3], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(10**energies, gainAllMean[:, 3], color = 'magenta')
	plt.plot(10**energies, gainAllMean[:, 4], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(10**energies, gainAllMean[:, 4], color = 'blue')
	plt.ylabel('Ganancia total')
	plt.xlabel(r'$E_{\mu^{-}}$(eV)')
	plt.legend()
	plt.xscale('log')
	plt.tight_layout()
	plt.savefig('avalancheGraphs/GananciaTot-E-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación ganancia total contra energía del muón para $\%$Ar/CO2 fijos')
	plt.plot(10**energies, gainAllStd[:, 0], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(10**energies, gainAllStd[:, 0], color = 'purple')
	plt.plot(10**energies, gainAllStd[:, 1], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(10**energies, gainAllStd[:, 1], color = 'red')
	plt.plot(10**energies, gainAllStd[:, 2], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(10**energies, gainAllStd[:, 2], color = 'green')
	plt.plot(10**energies, gainAllStd[:, 3], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(10**energies, gainAllStd[:, 3], color = 'magenta')
	plt.plot(10**energies, gainAllStd[:, 4], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(10**energies, gainAllStd[:, 4], color = 'blue')
	plt.ylabel('Desviación ganancia total')
	plt.xlabel(r'$E_{\mu^{-}}$(eV)')
	plt.xscale('log')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesGananciaTot-E-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Ganancia promedio contra energía del muón para $\%$Ar/CO2 fijos')
	plt.plot(10**energies, gainAvgMean[:, 0], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(10**energies, gainAvgMean[:, 0], color = 'purple')
	plt.plot(10**energies, gainAvgMean[:, 1], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(10**energies, gainAvgMean[:, 1], color = 'red')
	plt.plot(10**energies, gainAvgMean[:, 2], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(10**energies, gainAvgMean[:, 2], color = 'green')
	plt.plot(10**energies, gainAvgMean[:, 3], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(10**energies, gainAvgMean[:, 3], color = 'magenta')
	plt.plot(10**energies, gainAvgMean[:, 4], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(10**energies, gainAvgMean[:, 4], color = 'blue')
	plt.ylabel('Ganancia promedio')
	plt.xlabel(r'$E_{\mu^{-}}$(eV)')
	plt.xscale('log')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/GananciaProm-E-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación ganacia promedio contra energía del muón para $\%$Ar/CO2 fijos')
	plt.plot(10**energies, gainAvgStd[:, 0], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(10**energies, gainAvgStd[:, 0], color = 'purple')
	plt.plot(10**energies, gainAvgStd[:, 1], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(10**energies, gainAvgStd[:, 1], color = 'red')
	plt.plot(10**energies, gainAvgStd[:, 2], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(10**energies, gainAvgStd[:, 2], color = 'green')
	plt.plot(10**energies, gainAvgStd[:, 3], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(10**energies, gainAvgStd[:, 3], color = 'magenta')
	plt.plot(10**energies, gainAvgStd[:, 4], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(10**energies, gainAvgStd[:, 4], color = 'blue')
	plt.ylabel('Desviación ganancia promedio')
	plt.xlabel(r'$E_{\mu^{-}}$(eV)')
	plt.xscale('log')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesGananciaProm-E-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Número de electrones promedio contra energía del muón para $\%$Ar/CO2 fijos')
	plt.plot(10**energies, electronsAllMean[:, 0], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(10**energies, electronsAllMean[:, 0], color = 'purple')
	plt.plot(10**energies, electronsAllMean[:, 1], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(10**energies, electronsAllMean[:, 1], color = 'red')
	plt.plot(10**energies, electronsAllMean[:, 2], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(10**energies, electronsAllMean[:, 2], color = 'green')
	plt.plot(10**energies, electronsAllMean[:, 3], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(10**energies, electronsAllMean[:, 3], color = 'magenta')
	plt.plot(10**energies, electronsAllMean[:, 4], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(10**energies, electronsAllMean[:, 4], color = 'blue')
	plt.ylabel('Número de electrones promedio')
	plt.xlabel(r'$E_{\mu^{-}}$(eV)')
	plt.xscale('log')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/EleNumProm-E-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación del número de electrones promedio contra $E_{\mu^{-}}$ para $\%$Ar/CO2 fijos')
	plt.plot(10**energies, electronsAllStd[:, 0], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(10**energies, electronsAllStd[:, 0],  color = 'purple')
	plt.plot(10**energies, electronsAllStd[:, 1], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(10**energies, electronsAllStd[:, 1],  color = 'red')
	plt.plot(10**energies, electronsAllStd[:, 2], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(10**energies, electronsAllStd[:, 2],  color = 'green')
	plt.plot(10**energies, electronsAllStd[:, 3], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(10**energies, electronsAllStd[:, 3],  color = 'magenta')
	plt.plot(10**energies, electronsAllStd[:, 4], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(10**energies, electronsAllStd[:, 4],  color = 'blue')
	plt.ylabel('Desviación número de electrones promedio')
	plt.xlabel(r'$E_{\mu^{-}}$(eV)')
	plt.xscale('log')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesEleNumProm-E-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Número de electrones totales contra energía del muón para $\%$Ar/CO2 fijos')
	plt.plot(10**energies, electronsEventMean[:, 0], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(10**energies, electronsEventMean[:, 0], color = 'purple')
	plt.plot(10**energies, electronsEventMean[:, 1], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(10**energies, electronsEventMean[:, 1], color = 'red')
	plt.plot(10**energies, electronsEventMean[:, 2], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(10**energies, electronsEventMean[:, 2], color = 'green')
	plt.plot(10**energies, electronsEventMean[:, 3], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(10**energies, electronsEventMean[:, 3], color = 'magenta')
	plt.plot(10**energies, electronsEventMean[:, 4], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(10**energies, electronsEventMean[:, 4], color = 'blue')
	plt.ylabel('Número de electrones totales')
	plt.xlabel(r'$E_{\mu^{-}}$(eV)')
	plt.xscale('log')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/EleNumTot-E-Ar.eps', format = 'eps')
	plt.show()

	plt.title(r'Desviación del número de electrones totales contra $E_{\mu^{-}}$ para $\%$Ar/CO2 fijos')
	plt.plot(10**energies, electronsEventStd[:, 0], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(60, 40), color = 'purple')
	plt.scatter(10**energies, electronsEventStd[:, 0], color = 'purple')
	plt.plot(10**energies, electronsEventStd[:, 1], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(65, 35), color = 'red')
	plt.scatter(10**energies, electronsEventStd[:, 1], color = 'red')
	plt.plot(10**energies, electronsEventStd[:, 2], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(70, 30), color = 'green')
	plt.scatter(10**energies, electronsEventStd[:, 2], color = 'green')
	plt.plot(10**energies, electronsEventStd[:, 3], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(75, 25), color = 'magenta')
	plt.scatter(10**energies, electronsEventStd[:, 3], color = 'magenta')
	plt.plot(10**energies, electronsEventStd[:, 4], label = r'$\mathrm{Ar/CO_2} = $' + '{}/{}'.format(80, 20), color = 'blue')
	plt.scatter(10**energies, electronsEventStd[:, 4], color = 'blue')
	plt.ylabel('Desviación número de electrones totales')
	plt.xlabel(r'$E_{\mu^{-}}$(eV)')
	plt.xscale('log')
	plt.legend()
	plt.tight_layout()
	plt.savefig('avalancheGraphs/DesEleNumTot-E-Ar.eps', format = 'eps')
	plt.show()

	
fixedV()
"""
